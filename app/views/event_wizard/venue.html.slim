- @lead = 'Ustaw lokal, w którym odbędzie się to wydarzenie'

= render layout: 'layout' do
  = form_for @event, url: event_wizard_path(@event) do |f|
    .mb-2
      event-wizard-venue-picker input-name="event[venue_id]" input-value=@event.venue_id.to_s

    .form-group.text-xs-center
      input.btn.btn-primary type="submit" value=t(:save_and_proceed)

script type="x-template" id="event-wizard-venue-picker-tpl"
  div

    / Hidden input with current venue ID
    input type="hidden" :value="inputValue" :name="inputName"

    / Selected venue card
    div v-if="isPickedVenueVisible"
      .card
        img :src="venue.static_map_url.medium" width="538" height="200"

        .card-block v-if="!isLoadingVenue"
          .row
            .col-xs-8
              h4
                | {{ venue.name }}
              p.text-muted.mb-0
                | {{ venue.address }}

            .col-xs-4.text-xs-right
              a.btn.btn-outline-warning href="#" @click.prevent="this.inputValue=''"
                = t(:change_venue)

        .card-block.py-3 v-if="isLoadingVenue"
          p.lead.mb-0.text-muted.text-xs-center
            i.fa.fa-fw.fa-circle-o-notch.fa-spin

    / New venue form
    div v-if="newVenueFormVisible"
      .card
        .card-header
          h5.mb-0.text-xs-center
            | #{t :create_new} #{t('activerecord.models.venue.one').downcase}

        .card-block.pb-0
          .alert.alert-danger v-if="errors.length !== 0"
            ul.mb-0
              li v-for="error in errors"
                | {{ error }}

          .form-group
            label = t('activerecord.attributes.venue.name')
            input.form-control(type="text" v-model="newVenue.name")

          .form-group
            label = t('activerecord.attributes.venue.address')
            vue-google-autocomplete(
              id="new-venue-address"
              classname="form-control"
              placeholder="#{t :start_typing}..."
              types="geocode"
              @valuechanged="handleValueChanged"
            )

          .form-group.text-xs-center
            ul.list-inline
              li.list-inline-item: a.btn.btn-secondary href="#" @click.prevent="newVenueFormVisible=false" = t(:cancel)
              li.list-inline-item: a.btn.btn-success href="#" @click.prevent="doSaveVenue"
                template v-if="isSaving"
                  i.fa.fa-fw.fa-circle-o-notch.fa-spin
                template v-else=true
                  span
                    | #{t :create_new} #{t('activerecord.models.venue.one').downcase} +

    / Events search box
    div v-if="eventsSearchVisible"
      .card
        .card-block style="background: #f3f3f3"
          input.form-control.form-control-lg placeholder="#{t :search}..." v-model="query" debounce="200" autofocus="true"

        .card-block.py-3 v-if="isLoadingVenues"
          p.lead.mb-0.text-muted.text-xs-center
            i.fa.fa-fw.fa-circle-o-notch.fa-spin

        .card-block.py-3 v-if="venues.length == 0 && !isLoadingVenues"
          p.lead.mb-0.text-muted.text-xs-center
            = t :no_venues_found

        .list-group.list-group-flush v-if="!isLoadingVenues"
          .list-group-item v-for="venue in venues" @click="handleVenueClicked(venue)" style="cursor:pointer"
            .media
              .media-body
                p.mb-0: strong
                  | {{ venue.name }}
                p.mb-0.text-muted
                  | {{ venue.address }}

        .card-footer.text-xs-center
          | #{t :cant_find_the_venue?} <a href="#" @click.prevent="showNewVenueForm">#{t :create_venue} +</a>